////////////////
    add a single table that is Interactive, Data Formatting, Column Visibility Controls, Empty State Handling, Automatic Data Type Handling, Custom Data Formatting, Custom Header Formatting, Row Actions, Row Click Handling, Sorting, Search and Filtering, Pagination, Dark Mode, Advanced Cell Expansion, Master-Detail with Expandable Rows table from EXAMPLES.md to replace app\page.tsx/app \ layout.tsx
    also refer to API.md for props and usage
    ////////////////

////////////////////
    add new page in app\ for rebuilding an Airtable project.
    airtable\json contains all json data exported from Airtable(converted csv's from airtable\csv). Each json file is named after the corresponding Airtable table.
    airtable\js contains automation codes from the same Airtable project. each js file has an explanation of its purpose at the top of the file.
    work to rebuild the Airtable project using the json data and js automation codes.
    infer the relationships between tables based on column names and data patterns.
    infer each field's type (e.g., single line text, number, date, linked record, etc.) based on the data in the json files.
    infer any formulas or computed fields based on the data patterns.
    infer any automation logic based on the js files.
    infer Data Formatting rules based on the data patterns.
    attempt to reconstruct the Airtable project as accurately as possible.
    attempt to recreate the Airtable layout and user interface as closely as possible.
    including top navigation, sidebars, views, filters, sorts, and any other UI elements.
    top navigation should include: Data, Automations, Interfaces, Forms
    below that should be the appControlsContainer with links to different tables (based on json file names)
    use the existing table component to display each table's data.
    ////////////////////

////////////////////
    place all table universal functions in a new file called tableUtils.ts in the utils folder.
    /////////////////////

////////////////////
    add to utils\tableUtils.ts a function that generates an interactive table with the following features:
    make double clicking a row in the table makes that row editable.
    make Expand details button expand the row to show more details optional
    double clicking a column header makes that column name editable.
    each column width is adjustable by dragging the edge of the column header.
    each height is adjustable by dragging the edge of the row.
    the height of all the header rows is adjustable together by dragging the bottom edge of the header row.
    include all basic excel like table functions.
    for example, selecting multiple cells and copying and pasting values.
    selecting multiple rows and deleting them.
    selecting multiple rows and duplicating them.
    clicking and dragging to fill values down a column.
    ctrl+z to undo the last action.
    ctrl+y to redo the last undone action.
    ctrl+f to search within the table.
    plus symbol at the bottom of the table to add a new row.
    plus symbol at the end of the column headers to add a new column.
    right clicking on a column header to open a context menu with options to delete the column, rename the column, change the column type, and other column settings.
    when changing the column type or creating a new column, the user will be prompted to select the new column type from the list of supported types.
    this is a list of column types to support:
        Link to another record  //will prompt to select which table to link and name the column
        Single line text        //will prompt to enter a single line of text and name the column
        Long text               //will prompt to enter a longer text and name the column
        Attachment              //users will be able to upload a file and name the column
        Checkbox                //users will be able to select a true/false value and name the column, and more style options for the checkbox, like a toggle switch etc.
        Multiple select         //users will be able to select one or more options and name the column, user will also be able to pre-define the options, add a plus button when typing a new option to add it to the list of options, add dropdown to select from existing options
        Single select           //same as multiple select but only one option can be selected
        User                    //users will be able to select a user and name the column
        Date                    //users will be able to select a date and name the column, with options for date format
        Phone number            //users will be able to enter a phone number and name the column
        Email                   //users will be able to enter an email address and name the column
        URL                     //users will be able to enter a URL and name the column
        Number                  //users will be able to enter a number and name the column, with options for number format, decimal places, Large number abbreviation, comma separators, fractions, etc.
        Currency                //users will be able to enter a currency value and name the column, with options for currency type/symbol,
                                    Thousands and decimal separators
                                    Local             1,000,000.00
                                    Comma, period     1,000,000.00
                                    Period, comma     1.000.000,00
                                    Space, comma      1 000 000,00
                                    Space, period     1 000 000.00
        Percent                 //users will be able to enter a percentage value and name the column
        Duration                //users will be able to enter a duration and name the column
        Rating                  //users will be able to enter a rating and name the column, including options for number of stars, custom icons, etc.
        Formula                 //users will be able to enter a formula and Compute values based on fields and name the column
        Rollup                  //users will be able to Summarize data from linked records and name the column
        Count                   //users will be able to Count the number of linked records and name the column
        Lookup                  //users will be able to See values from a field in a linked record and name the column
        Created time            //users will be able to See the date and time each record was created and name the column
        Last modified time      //users will be able to See the date and time each record was last modified and name the column
        Created by              //users will be able to See the user who created each record and name the column
        Last modified by        //users will be able to See the user who last modified each record and name the column
///////////////////////

//////////////////////
    add icons for each of the column types listed above.
    use icons from a public icon library like FontAwesome or Material Icons.
    fix table is missing a lot of functions:
    1. right click selected cells to open context menu with options to cut, copy, paste, delete, insert row above, insert row below, insert column left, insert column right, delete row, delete column.
    2. color controls for cell background color and text color.
    3. click and drag to reorder columns.
    4. click and drag to reorder rows.
    5. finish cell edit by pressing enter key.
    6. cancel cell edit by pressing escape key.
    7. show icon in column header before the column name based on column type.
    8. when changing column type, convert existing data to the new type if possible.
    9. add collapsing sidebar on the left with list of views of the active table.each view should have an icon based on its type. follow this list of view types and their corresponding icons:
       Grid — blue 2×2 table/grid icon (four squares).
       Calendar — orange calendar page icon.
       Gallery — blue 3×3 tiles icon.
       Kanban — green board icon with vertical columns.
       Timeline — pink branching/flow line icon.
       List — blue list/notepad icon (stacked lines).
       Gantt — teal Gantt bars icon (staggered horizontal bars with a connector).

       ——— (thin divider line) ———

       Form — purple document/form icon.
       Section — gray section/panel icon (stacked lines in a box).

    10. add missing text editing features:
        a. finish cell edit by pressing enter key.
        b. cancel cell edit by pressing escape key.
        c. multi-line text editing with line breaks using shift+enter.
        d. text alignment options (left, center, right).
        e. text formatting options (bold, italic, underline).
        f. drag to select text within a cell.
        g. copy and paste text formatting.
        h. 
    11. add star column functionality.
        default 5 Empty stars for each row.
        clicking on a star fills in that star and all stars to the left of it.
        hovering over a star highlights that star and all stars to the left of it.
        ability to set the maximum number of stars (e.g., 3-star rating, 10-star rating).
    12. make drag to reorder columns and rows show a visual placeholder where the column or row will be dropped.
        make drag to reorder columns and rows visually show the column or row being dragged by the mouse.

    13. disable text selection unless editing cell
    14. on hover of a cell, show a light border around the cell to indicate it is hoverable.
    15. on hover of an edge of a column header or row, make the whole edge more blue and 2.5px to indicate it is draggable for resizing.
    16. all icons should match text height and be vertically centered.
    17. Handle Resizer:
    when resizing a column or row, show a 4px x 25px handle that follows the mouse to indicate the new size. this handle should slide along the edge being resized. now the whole edge lights up, but a handle would be better. a handle is a small rectangle that follows the mouse along the edge being resized. and by follow along the edge, I mean it should only move in one direction (horizontally for column resizing, vertically for row resizing).
    18. when hovering/resizing a column or row, show a vertical or horizontal bar that follows the mouse sliding along the edge to indicate edge is draggable.
    confirm there are no duplicate lines lighting up when hovering or duplicate handles appearing when resizing.
    19. make Expand details button expand as a fullscreen popup modal instead of expanding the row height.
    20. make this list a dropdown for each column header:
        open on hover or click of a down arrow icon next to the column name.
        place icons on the left side of each option.
        options:
        Edit field — pencil icon.
        Duplicate field — two overlapping squares icon.
        Insert left — left arrow icon.
        Insert right — right arrow icon.
        Copy field URL — link/chain icon.
        Edit field description — info “i” in a circle icon.
        Edit field permissions — padlock icon.
        Sort ☐ → ☑ — sort icon (unchecked to checked for checkbox fields).
        Sort ☑ → ☐ — sort icon (checked to unchecked for checkbox fields).
        Filter by this field — funnel/filter icon.
        Group by this field — grouped rows/table stacks icon.
        Show dependencies — sliders/controls icon.
        Hide field — eye with a slash icon.
        Delete field — trash can icon.
    21. add a load more button at the bottom of the table when there are more rows to load.
    22. implement virtual scrolling for performance with large datasets. Only render the rows and columns that are visible in the viewport.
    23. add a confirmation modal when deleting rows or columns to prevent accidental deletions.
    24. table snapshots isbeing covered by the table in airtable rebuild page. adjust z-indexes to ensure the snapshots dropdown appears above the table.
    25. prompt user to set type and name when creating a new column.
    26. the aria-label="Table views" tab should be a dropdown that only appears when the 'Create new...' button is clicked, and disappears when clicking outside of it.
    27. when pasting data into the table, automatically create new rows if the pasted data exceeds the current number of rows.
    28. include all tables in the airtable page. this is the list of all json files that all require a table on the airtable page: 
        airtable\json\Accentra Catalogue-Grid view.json
        airtable\json\Area Tags-Grid view.json
        airtable\json\Component Summary-Grid view.json
        airtable\json\Component Type-Grid view.json
        airtable\json\Components copy-Grid view.json
        airtable\json\Components-Grid view.json
        airtable\json\Customers-quote.json
        airtable\json\Doors Staging-Grid view.json
        airtable\json\Field Mapping-Grid view.json
        airtable\json\File Uploads-Grid view.json
        airtable\json\Group Output-Grid view.json
        airtable\json\Hardware Items-Grid view.json
        airtable\json\Hardware Set Items-Grid view.json
        airtable\json\Hardware Sets-Grid view.json
        airtable\json\Hardware Staging-Grid view.json
        airtable\json\Item Categories-Grid view.json
        airtable\json\Markup Overrides-Grid view.json
        airtable\json\Openings-Grid view.json
        airtable\json\Price Overrides-Grid view.json
        airtable\json\Projects-Grid view.json
        airtable\json\Quote Line Items-Grid view.json
        airtable\json\Staging-Grid view.json
        airtable\json\Submittals-Grid view.json
    29. column dropdown menu is getting cut off at the bottom of the screen. make it open upwards when there is not enough space below the column header. also apply this logic to other dropdowns that may be cut off by the viewport edges.
    30. when editing a cell near the bottom of the viewport, make sure the entire cell is visible by scrolling the table if necessary.
    31. add the ability to drag and drop table tabs to reorder them.
    32. add clicking the header from a column selects that entire column.
    33. add a numbering system at the left of each row, and add clicking the number from a row selects that entire row. on
    34. on hover the row number become a checkbox to select the row.
    35. add select all checkbox in the top left corner of the table to select/deselect all rows.
    36. column header dropdown menu button should float to the right and should be hidden by default and only appear when hovering over the column header. and dropdown menu should only appear when clicking the button, not on hover of the entire column header.
    37.  all dropdowns and filters work in app/page but Grid view, Hide Fields, Filter, Group, Sort, Color and Undo do not work in app/airtable/page yet.
    fix these issues.
    38. when changing a column type to single select or multiple select, preserve existing values by mapping them to new options.
    39. make a universal rule that clicking outside of any open dropdown, modal, cell editor, cell or context menu closes it or deactivates it or saves it as appropriate then closes it or deactivates it. so if the user makes a change in a cell, then clicks outside the cell, it saves the change and closes the cell editor. if the user opens a dropdown menu, then clicks outside the dropdown, it closes the dropdown. if the user opens a modal, then clicks outside the modal, it closes the modal. if the user right clicks to open a context menu, then clicks outside the context menu, it closes the context menu.
    40. for single select and multiple select columns, double clicking a cell opens a dropdown to select options instead of a text input. the list of options should appear in a dropdown below the cell, with a search bar at the top to filter options. the dropdown should appear ontop of other table elements. the dropdown should expand upwards if there is not enough space below the cell. and the dropdown should expand downwards if there is not enough space above the cell. 
    41. the Edit field button in column header dropdown should open another dropdown menu with options to edit field settings instead of opening the field to rename the column. if a dropdown in imgReferences/airtable_dropdown_specs.txt is called a "field configuration", then that dropdown should open when clicking the Edit field button in the column header dropdown menu and the column type matches the dropdown.
    42. an .env.local file was created to store environment variables for neon database connection. make sure to add .env.local to .gitignore to prevent it from being committed to version control.
    43. create a new neon table for each Airtable table in the Airtable project being rebuilt. make sure to set up the correct columns and data based on the json files.
    44. replace json files with neon data for each Airtable table json file to the corresponding neon table. so all json data is now stored in neon database instead of local json files.
    45. the user should be able to view and edit data in each neon table through the interactive table component. this includes creating, updating, and deleting columns, fields and rows
    46. implement real-time synchronization between the table component and the neon database
    . use the neon database connection to fetch and save data. you may need to modify the table component to work with neon data instead of json data. you may also need to create new api routes to handle database operations.try to make a new utils file if necessary to handle any database interactions.
    47. add this rule to table component:
      if header's value is [], show as empty cell instead of string "[]".
        example: in app/airtable/page.tsx, the cell value is "[]". so show an empty cell instead of the string "[]". so just never show "[]" as a cell value. even if the user types "[]" into a cell, show it as an empty cell.
         fix this issue.        
    48. hide aria-label="Select all rows" checkbox in top left corner of table until hover over it.
    49. change this snippet in tableUtils.ts:      
      h("div", { className: "flex items-center gap-2 text-sm text-zinc-500 dark:text-neutral-300" },
        renderColumnIcon(column.type),
        h("span", null, typeLabel)
      )    

    should be changed to a dropdown that select from all standard field types when editing a field.
    50. create a agents.md file in the root directory that documents all AI agents used in this project, including their purpose, functionality, and any relevant implementation details. use .notes.txt as a reference for knowledge about the project.
    51. both pages should share the same table component from utils\tableUtils.ts to ensure consistency in functionality and appearance across the application. now I find functionality differences between app/page.tsx and app/airtable/page.tsx like edit field still renames the column instead of opening field configuration. also all the column types in app/page.tsx have the same icon but in app/airtable/page.tsx they have different icons. make sure both pages use the same table component from utils\tableUtils.ts and have the same functionality
    52.  user should be able to change column type from the field configuration dropdown. the code should record in the database, so create a new table within neon, for the column type and any relevant settings for that column type.
    for example:
    formula, Table reference, record reference, currency type, number format, date format, etc... refer to imgReferences\airtable_dropdown_specs.txt for all settings for each column type.
    53.  in airtable/page.tsx, id="table-select" should not be a dropdown. it should be a tab bar with each tab representing a different table from the neon database. clicking on a tab switches to that table in the table component. implement this change. app/page.tsx should remain unchanged as a dropdown for selecting tables.
    54.  npm install sortablejs was run to install sortablejs package for drag and drop functionality. Update in table utils the drag and drop function to reorder table tabs, columns, and rows using sortablejs for better performance and reliability. the dropdown for table selection should remain unchanged.
    55.  fix in tableUtils.ts the issue where a column type single select or multiple select after typing in the input anything and 'No options found' or if no match was found in the existing options list when editing a cell. a plus button should appear to allow the user to create a new option by clicking a plus button next to the input field. this will add the new option to the list and select it.
    56.  add in tableUtils from https://github.com/SortableJS/react-sortablejs MultiDrag, and make the whole thing more animated and smooth. include multi-drag functionality for rows and columns in the table component using React-SortableJS. this allows users to select multiple rows or columns and drag them together to reorder. ensure that the multi-drag functionality is intuitive and provides visual feedback during the drag operation. show tabs and columns swap animation. now everything just jumps to the new position. make it smooth animated transition to the new position.
    57.  Unified requirements (Single-Select & Multi-Select)
            Add (“+”) button behavior
            Always render the Add button while the user is typing.
                Disable Add only when there’s an exact (trimmed, case-insensitive) match with an existing option.
                When disabled, show a tooltip: “This option already exists.”
            Matching rules
                Exact match disables Add.
                Partial matches do not disable Add. (The button still shows and is enabled.)
            Backspace & editing
            Input must be fully editable: user can backspace/delete freely.
            Avoid preventDefault() on Backspace in any key handler bound to the editor input.
            Respect IME composition (don’t run filtering/matching until compositionend).
            Delete (“−”) per option
            Show a Delete button next to each existing option.
            On click, show a confirmation modal:
            “Delete option ‘X’ from this field? It will be removed from all records that use it.”
            On confirm:
            Remove the option from the column’s option set.
            Cascade across records:
            Single-select: if record has that option, set to null (or column default if you have one).
            Multi-select: remove that value from the array (drop empty arrays to []).
            Consider permission checks, undo/restore if your app supports it, and log analytics.
    58.  fix the Formula Field Configuration editor has no input for custom formulas. add a text area input for entering custom formulas in the Formula Field Configuration editor in tableUtils.ts. and support basic formula syntax highlighting and validation. 
    59.  add in tableUtils.ts support for processing formulas in the Formula column type. implement a basic formula parser and evaluator that can handle functions and operations used in column formulas. ensure that formulas are recalculated automatically when dependent fields are updated.
    find all formulas to support: https://support.microsoft.com/en-us/office/excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
    60.  fix in tableUtils.ts the issue where the columns are no longer Resizable after adding sortablejs for drag and drop functionality. ensure that column resizing functionality remains intact and works seamlessly alongside the drag-and-drop features provided by sortablejs.
    61.  fix in tableUtils.ts the issue where the handle for resizing columns and rows is not aligned with the table edges. it will follow the exact mouse location. it should only follow the mouse location on one axis. for example, when resizing a column, the handle should only move vertically along the column edge, not horizontally. but should follow the mouse vertically. if within 5 pixels of the edge horizontally, it should snap to the edge horizontally. and same for row resizing but vertically. for example, when resizing a row, the handle should only move horizontally along the row edge, not vertically. but should follow the mouse horizontally. if within 5 pixels of the edge vertically, it should snap to the edge vertically.
    62.  fix in tableUtils.ts the issue where the highlighted edge for resizing columns and rows is not aligned with the table edges. it should only highlight the edge and not move with the mouse. for example, when resizing a column, the highlighted edge should stay on the column edge, not move horizontally with the mouse. it should only highlight the edge vertically. if within 5 pixels of the edge horizontally, it should snap to the edge horizontally. and same for row resizing but vertically. for example, when resizing a row, the highlighted edge should stay on the row edge, not move vertically with the mouse. it should only highlight the edge horizontally. if within 5 pixels of the edge vertically, it should snap to the edge vertically.
    63.  formula are not being fetch from neon database. implement fetching formulas from neon database for columns of type Formula in tableUtils.ts. ensure that the formula definitions are correctly retrieved and applied to the respective columns when rendering the table.
    64.  follow this https://airtable.com/developers/scripting/api/base fetch all data from the Airtable website with baseId=appIBydxpXuSdssZW. then create in neon database all tables and data from this Airtable base. so each table require an identifier to map to the correct project. so only tables fetched from baseId=appIBydxpXuSdssZW are shown in app/airtable/page.tsx. and the other tables are not shown in app/airtable/page.tsx. so give every table a tag identifing to a project. 
    for example all airtable tables have a project tag of `7887airtable8798`
    all tables of app/page.tsx have a project tag of `3456default2344`.
    65.  any changes in baseId=appIBydxpXuSdssZW will trigger an update in neon database to keep the data in sync.